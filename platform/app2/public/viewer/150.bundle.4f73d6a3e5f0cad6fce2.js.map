{"version":3,"file":"150.bundle.4f73d6a3e5f0cad6fce2.js","mappings":"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","sources":["webpack:///../../../extensions/cornerstone-dicom-seg/src/id.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/getSopClassHandlerModule.js","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/dicomlabToRGB.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/callInputDialog.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/panels/PanelSegmentation.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/getHangingProtocolModule.ts","webpack:///../../../extensions/cornerstone-dicom-seg/src/index.tsx","webpack:///../../../extensions/cornerstone-dicom-seg/src/utils/_hydrateSEG.ts"],"sourcesContent":["import packageJson from '../package.json';\n\nconst id = packageJson.name;\nconst SOPClassHandlerName = 'dicom-seg';\nconst SOPClassHandlerId = `${id}.sopClassHandlerModule.${SOPClassHandlerName}`;\n\nexport { id, SOPClassHandlerId, SOPClassHandlerName };\n","import { utils } from '@ohif/core';\nimport {\n  metaData,\n  cache,\n  triggerEvent,\n  eventTarget,\n} from '@cornerstonejs/core';\nimport { adaptersSEG, Enums } from '@cornerstonejs/adapters';\n\nimport { SOPClassHandlerId } from './id';\nimport { dicomlabToRGB } from './utils/dicomlabToRGB';\n\nconst sopClassUids = ['1.2.840.10008.5.1.4.1.1.66.4'];\n\nlet loadPromises = {};\n\nfunction _getDisplaySetsFromSeries(\n  instances,\n  servicesManager,\n  extensionManager\n) {\n  const instance = instances[0];\n\n  const {\n    StudyInstanceUID,\n    SeriesInstanceUID,\n    SOPInstanceUID,\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPClassUID,\n    wadoRoot,\n    wadoUri,\n    wadoUriRoot,\n  } = instance;\n\n  const displaySet = {\n    Modality: 'SEG',\n    loading: false,\n    isReconstructable: true, // by default for now since it is a volumetric SEG currently\n    displaySetInstanceUID: utils.guid(),\n    SeriesDescription,\n    SeriesNumber,\n    SeriesDate,\n    SOPInstanceUID,\n    SeriesInstanceUID,\n    StudyInstanceUID,\n    SOPClassHandlerId,\n    SOPClassUID,\n    referencedImages: null,\n    referencedSeriesInstanceUID: null,\n    referencedDisplaySetInstanceUID: null,\n    isDerivedDisplaySet: true,\n    isLoaded: false,\n    isHydrated: false,\n    segments: {},\n    sopClassUids,\n    instance,\n    instances: [instance],\n    wadoRoot,\n    wadoUriRoot,\n    wadoUri,\n    isOverlayDisplaySet: true,\n  };\n\n  const referencedSeriesSequence = instance.ReferencedSeriesSequence;\n\n  if (!referencedSeriesSequence) {\n    throw new Error('ReferencedSeriesSequence is missing for the SEG');\n  }\n\n  const referencedSeries = referencedSeriesSequence[0];\n\n  displaySet.referencedImages =\n    instance.ReferencedSeriesSequence.ReferencedInstanceSequence;\n  displaySet.referencedSeriesInstanceUID = referencedSeries.SeriesInstanceUID;\n\n  displaySet.getReferenceDisplaySet = () => {\n    const { displaySetService } = servicesManager.services;\n    const referencedDisplaySets = displaySetService.getDisplaySetsForSeries(\n      displaySet.referencedSeriesInstanceUID\n    );\n\n    if (!referencedDisplaySets || referencedDisplaySets.length === 0) {\n      throw new Error('Referenced DisplaySet is missing for the SEG');\n    }\n\n    const referencedDisplaySet = referencedDisplaySets[0];\n\n    displaySet.referencedDisplaySetInstanceUID =\n      referencedDisplaySet.displaySetInstanceUID;\n\n    // Todo: this needs to be able to work with other reference volumes (other than streaming) such as nifti, etc.\n    displaySet.referencedVolumeURI = referencedDisplaySet.displaySetInstanceUID;\n    const referencedVolumeId = `cornerstoneStreamingImageVolume:${displaySet.referencedVolumeURI}`;\n    displaySet.referencedVolumeId = referencedVolumeId;\n\n    return referencedDisplaySet;\n  };\n\n  displaySet.load = async ({ headers }) =>\n    await _load(displaySet, servicesManager, extensionManager, headers);\n\n  return [displaySet];\n}\n\nfunction _load(segDisplaySet, servicesManager, extensionManager, headers) {\n  const { SOPInstanceUID } = segDisplaySet;\n  const { segmentationService } = servicesManager.services;\n\n  if (\n    (segDisplaySet.loading || segDisplaySet.isLoaded) &&\n    loadPromises[SOPInstanceUID] &&\n    _segmentationExists(segDisplaySet, segmentationService)\n  ) {\n    return loadPromises[SOPInstanceUID];\n  }\n\n  segDisplaySet.loading = true;\n\n  // We don't want to fire multiple loads, so we'll wait for the first to finish\n  // and also return the same promise to any other callers.\n  loadPromises[SOPInstanceUID] = new Promise(async (resolve, reject) => {\n    if (\n      !segDisplaySet.segments ||\n      Object.keys(segDisplaySet.segments).length === 0\n    ) {\n      await _loadSegments({\n        extensionManager,\n        servicesManager,\n        segDisplaySet,\n        headers,\n      });\n    }\n\n    const suppressEvents = true;\n    segmentationService\n      .createSegmentationForSEGDisplaySet(segDisplaySet, null, suppressEvents)\n      .then(() => {\n        segDisplaySet.loading = false;\n        resolve();\n      })\n      .catch(error => {\n        segDisplaySet.loading = false;\n        reject(error);\n      });\n  });\n\n  return loadPromises[SOPInstanceUID];\n}\n\nasync function _loadSegments({\n  extensionManager,\n  servicesManager,\n  segDisplaySet,\n  headers,\n}) {\n  const utilityModule = extensionManager.getModuleEntry(\n    '@ohif/extension-cornerstone.utilityModule.common'\n  );\n\n  const { segmentationService } = servicesManager.services;\n\n  const { dicomLoaderService } = utilityModule.exports;\n  const arrayBuffer = await dicomLoaderService.findDicomDataPromise(\n    segDisplaySet,\n    null,\n    headers\n  );\n\n  const cachedReferencedVolume = cache.getVolume(\n    segDisplaySet.referencedVolumeId\n  );\n\n  if (!cachedReferencedVolume) {\n    throw new Error(\n      'Referenced Volume is missing for the SEG, and stack viewport SEG is not supported yet'\n    );\n  }\n\n  const { imageIds } = cachedReferencedVolume;\n\n  // Todo: what should be defaults here\n  const tolerance = 0.001;\n  const skipOverlapping = true;\n\n  eventTarget.addEventListener(Enums.Events.SEGMENTATION_LOAD_PROGRESS, evt => {\n    const { percentComplete } = evt.detail;\n    segmentationService._broadcastEvent(\n      segmentationService.EVENTS.SEGMENT_LOADING_COMPLETE,\n      {\n        percentComplete,\n      }\n    );\n  });\n\n  const results = await adaptersSEG.Cornerstone3D.Segmentation.generateToolState(\n    imageIds,\n    arrayBuffer,\n    metaData,\n    { skipOverlapping, tolerance, eventTarget, triggerEvent }\n  );\n\n  results.segMetadata.data.forEach((data, i) => {\n    if (i > 0) {\n      data.rgba = dicomlabToRGB(data.RecommendedDisplayCIELabValue);\n    }\n  });\n\n  Object.assign(segDisplaySet, results);\n}\n\nfunction _segmentationExists(segDisplaySet, segmentationService) {\n  // This should be abstracted with the CornerstoneCacheService\n  return segmentationService.getSegmentation(\n    segDisplaySet.displaySetInstanceUID\n  );\n}\n\nfunction getSopClassHandlerModule({ servicesManager, extensionManager }) {\n  const getDisplaySetsFromSeries = instances => {\n    return _getDisplaySetsFromSeries(\n      instances,\n      servicesManager,\n      extensionManager\n    );\n  };\n\n  return [\n    {\n      name: 'dicom-seg',\n      sopClassUids,\n      getDisplaySetsFromSeries,\n    },\n  ];\n}\n\nexport default getSopClassHandlerModule;\n","import dcmjs from 'dcmjs';\n\n/**\n * Converts a CIELAB color to an RGB color using the dcmjs library.\n * @param cielab - The CIELAB color to convert.\n * @returns The RGB color as an array of three integers between 0 and 255.\n */\nfunction dicomlabToRGB(cielab: number[]): number[] {\n  const rgb = dcmjs.data.Colors.dicomlab2RGB(cielab).map(x =>\n    Math.round(x * 255)\n  );\n\n  return rgb;\n}\n\nexport { dicomlabToRGB };\n","import React from 'react';\nimport { Input, Dialog, ButtonEnums } from '@ohif/ui';\n\nfunction callInputDialog(uiDialogService, label, callback) {\n  const dialogId = 'enter-segment-label';\n\n  const onSubmitHandler = ({ action, value }) => {\n    switch (action.id) {\n      case 'save':\n        callback(value.label, action.id);\n        break;\n      case 'cancel':\n        callback('', action.id);\n        break;\n    }\n    uiDialogService.dismiss({ id: dialogId });\n  };\n\n  if (uiDialogService) {\n    uiDialogService.create({\n      id: dialogId,\n      centralize: true,\n      isDraggable: false,\n      showOverlay: true,\n      content: Dialog,\n      contentProps: {\n        title: 'Segment',\n        value: { label },\n        noCloseButton: true,\n        onClose: () => uiDialogService.dismiss({ id: dialogId }),\n        actions: [\n          { id: 'cancel', text: 'Cancel', type: ButtonEnums.type.secondary },\n          { id: 'save', text: 'Confirm', type: ButtonEnums.type.primary },\n        ],\n        onSubmit: onSubmitHandler,\n        body: ({ value, setValue }) => {\n          return (\n            <Input\n              label=\"Enter the segment label\"\n              labelClassName=\"text-white text-[14px] leading-[1.2]\"\n              autoFocus\n              className=\"bg-black border-primary-main\"\n              type=\"text\"\n              value={value.label}\n              onChange={event => {\n                event.persist();\n                setValue(value => ({ ...value, label: event.target.value }));\n              }}\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmitHandler({ value, action: { id: 'save' } });\n                }\n              }}\n            />\n          );\n        },\n      },\n    });\n  }\n}\n\nexport default callInputDialog;\n","import React, { useEffect, useState, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { SegmentationGroupTable } from '@ohif/ui';\nimport callInputDialog from './callInputDialog';\nimport { useAppConfig } from '@state';\nimport { useTranslation } from 'react-i18next';\n\nexport default function PanelSegmentation({\n  servicesManager,\n  commandsManager,\n}) {\n  const { segmentationService, uiDialogService } = servicesManager.services;\n  const [appConfig] = useAppConfig();\n  const disableEditing = appConfig?.disableEditing;\n\n  const { t } = useTranslation('PanelSegmentation');\n  const [selectedSegmentationId, setSelectedSegmentationId] = useState(null);\n  const [segmentationConfiguration, setSegmentationConfiguration] = useState(\n    segmentationService.getConfiguration()\n  );\n\n  const [segmentations, setSegmentations] = useState(() =>\n    segmentationService.getSegmentations()\n  );\n\n  const [isMinimized, setIsMinimized] = useState({});\n\n  const onToggleMinimizeSegmentation = useCallback(\n    id => {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [id]: !prevState[id],\n      }));\n    },\n    [setIsMinimized]\n  );\n\n  // Only expand the last segmentation added to the list and collapse the rest\n  useEffect(() => {\n    const lastSegmentationId = segmentations[segmentations.length - 1]?.id;\n    if (lastSegmentationId) {\n      setIsMinimized(prevState => ({\n        ...prevState,\n        [lastSegmentationId]: false,\n      }));\n    }\n  }, [segmentations, setIsMinimized]);\n\n  useEffect(() => {\n    // ~~ Subscription\n    const added = segmentationService.EVENTS.SEGMENTATION_ADDED;\n    const updated = segmentationService.EVENTS.SEGMENTATION_UPDATED;\n    const removed = segmentationService.EVENTS.SEGMENTATION_REMOVED;\n    const subscriptions = [];\n\n    [added, updated, removed].forEach(evt => {\n      const { unsubscribe } = segmentationService.subscribe(evt, () => {\n        const segmentations = segmentationService.getSegmentations();\n        setSegmentations(segmentations);\n        setSegmentationConfiguration(segmentationService.getConfiguration());\n      });\n      subscriptions.push(unsubscribe);\n    });\n\n    return () => {\n      subscriptions.forEach(unsub => {\n        unsub();\n      });\n    };\n  }, []);\n\n  const onSegmentationClick = (segmentationId: string) => {\n    segmentationService.setActiveSegmentationForToolGroup(segmentationId);\n  };\n\n  const onSegmentationDelete = (segmentationId: string) => {\n    segmentationService.remove(segmentationId);\n  };\n\n  const getToolGroupIds = segmentationId => {\n    const toolGroupIds = segmentationService.getToolGroupIdsWithSegmentation(\n      segmentationId\n    );\n\n    return toolGroupIds;\n  };\n\n  const onSegmentClick = (segmentationId, segmentIndex) => {\n    segmentationService.setActiveSegmentForSegmentation(\n      segmentationId,\n      segmentIndex\n    );\n\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    toolGroupIds.forEach(toolGroupId => {\n      // const toolGroupId =\n      segmentationService.setActiveSegmentationForToolGroup(\n        segmentationId,\n        toolGroupId\n      );\n      segmentationService.jumpToSegmentCenter(\n        segmentationId,\n        segmentIndex,\n        toolGroupId\n      );\n    });\n  };\n\n  const onSegmentEdit = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n\n    const segment = segmentation.segments[segmentIndex];\n    const { label } = segment;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.setSegmentLabelForSegmentation(\n        segmentationId,\n        segmentIndex,\n        label\n      );\n    });\n  };\n\n  const onSegmentationEdit = segmentationId => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const { label } = segmentation;\n\n    callInputDialog(uiDialogService, label, (label, actionId) => {\n      if (label === '') {\n        return;\n      }\n\n      segmentationService.addOrUpdateSegmentation(\n        {\n          id: segmentationId,\n          label,\n        },\n        false, // suppress event\n        true // notYetUpdatedAtSource\n      );\n    });\n  };\n\n  const onSegmentColorClick = (segmentationId, segmentIndex) => {\n    // Todo: Implement color picker later\n    return;\n  };\n\n  const onSegmentDelete = (segmentationId, segmentIndex) => {\n    // segmentationService.removeSegmentFromSegmentation(\n    //   segmentationId,\n    //   segmentIndex\n    // );\n    console.warn('not implemented yet');\n  };\n\n  const onToggleSegmentVisibility = (segmentationId, segmentIndex) => {\n    const segmentation = segmentationService.getSegmentation(segmentationId);\n    const segmentInfo = segmentation.segments[segmentIndex];\n    const isVisible = !segmentInfo.isVisible;\n    const toolGroupIds = getToolGroupIds(segmentationId);\n\n    // Todo: right now we apply the visibility to all tool groups\n    toolGroupIds.forEach(toolGroupId => {\n      segmentationService.setSegmentVisibility(\n        segmentationId,\n        segmentIndex,\n        isVisible,\n        toolGroupId\n      );\n    });\n  };\n\n  const onToggleSegmentationVisibility = segmentationId => {\n    segmentationService.toggleSegmentationVisibility(segmentationId);\n  };\n\n  const _setSegmentationConfiguration = useCallback(\n    (segmentationId, key, value) => {\n      segmentationService.setConfiguration({\n        segmentationId,\n        [key]: value,\n      });\n    },\n    [segmentationService]\n  );\n\n  return (\n    <div className=\"flex flex-col flex-auto min-h-0 justify-between mt-1\">\n      {/* show segmentation table */}\n      {segmentations?.length ? (\n        <SegmentationGroupTable\n          title={t('Segmentations')}\n          showAddSegmentation={false}\n          segmentations={segmentations}\n          isMinimized={isMinimized}\n          activeSegmentationId={selectedSegmentationId || ''}\n          onSegmentationClick={onSegmentationClick}\n          onSegmentationDelete={onSegmentationDelete}\n          onSegmentationEdit={onSegmentationEdit}\n          onSegmentClick={onSegmentClick}\n          onSegmentEdit={onSegmentEdit}\n          disableEditing={disableEditing}\n          onSegmentColorClick={onSegmentColorClick}\n          onSegmentDelete={onSegmentDelete}\n          onToggleSegmentVisibility={onToggleSegmentVisibility}\n          onToggleSegmentationVisibility={onToggleSegmentationVisibility}\n          onToggleMinimizeSegmentation={onToggleMinimizeSegmentation}\n          segmentationConfig={{ initialConfig: segmentationConfiguration }}\n          setRenderOutline={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderOutline',\n              value\n            )\n          }\n          setOutlineOpacityActive={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'outlineOpacity',\n              value\n            )\n          }\n          setRenderFill={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderFill',\n              value\n            )\n          }\n          setRenderInactiveSegmentations={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'renderInactiveSegmentations',\n              value\n            )\n          }\n          setOutlineWidthActive={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'outlineWidthActive',\n              value\n            )\n          }\n          setFillAlpha={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'fillAlpha',\n              value\n            )\n          }\n          setFillAlphaInactive={value =>\n            _setSegmentationConfiguration(\n              selectedSegmentationId,\n              'fillAlphaInactive',\n              value\n            )\n          }\n        />\n      ) : null}\n    </div>\n  );\n}\n\nPanelSegmentation.propTypes = {\n  commandsManager: PropTypes.shape({\n    runCommand: PropTypes.func.isRequired,\n  }),\n  appConfig: PropTypes.object.isRequired,\n  servicesManager: PropTypes.shape({\n    services: PropTypes.shape({\n      segmentationService: PropTypes.shape({\n        getSegmentation: PropTypes.func.isRequired,\n        getSegmentations: PropTypes.func.isRequired,\n        toggleSegmentationVisibility: PropTypes.func.isRequired,\n        subscribe: PropTypes.func.isRequired,\n        EVENTS: PropTypes.object.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n","import { Types } from '@ohif/core';\n\nconst segProtocol: Types.HangingProtocol.Protocol = {\n  id: '@ohif/seg',\n  // Don't store this hanging protocol as it applies to the currently active\n  // display set by default\n  // cacheId: null,\n  name: 'Segmentations',\n  // Just apply this one when specifically listed\n  protocolMatchingRules: [],\n  toolGroupIds: ['default'],\n  // -1 would be used to indicate active only, whereas other values are\n  // the number of required priors referenced - so 0 means active with\n  // 0 or more priors.\n  numberOfPriorsReferenced: 0,\n  // Default viewport is used to define the viewport when\n  // additional viewports are added using the layout tool\n  defaultViewport: {\n    viewportOptions: {\n      viewportType: 'stack',\n      toolGroupId: 'default',\n      allowUnmatchedView: true,\n    },\n    displaySets: [\n      {\n        id: 'segDisplaySetId',\n        matchedDisplaySetsIndex: -1,\n      },\n    ],\n  },\n  displaySetSelectors: {\n    segDisplaySetId: {\n      seriesMatchingRules: [\n        {\n          attribute: 'Modality',\n          constraint: {\n            equals: 'SEG',\n          },\n        },\n      ],\n    },\n  },\n  stages: [\n    {\n      name: 'Segmentations',\n      viewportStructure: {\n        layoutType: 'grid',\n        properties: {\n          rows: 1,\n          columns: 1,\n        },\n      },\n      viewports: [\n        {\n          viewportOptions: { allowUnmatchedView: true },\n          displaySets: [\n            {\n              id: 'segDisplaySetId',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nfunction getHangingProtocolModule() {\n  return [\n    {\n      name: segProtocol.id,\n      protocol: segProtocol,\n    },\n  ];\n}\n\nexport default getHangingProtocolModule;\nexport { segProtocol };\n","import { id } from './id';\nimport React from 'react';\n\nimport { Types } from '@ohif/core';\n\nimport getSopClassHandlerModule from './getSopClassHandlerModule';\nimport PanelSegmentation from './panels/PanelSegmentation';\nimport getHangingProtocolModule from './getHangingProtocolModule';\nimport hydrateSEGDisplaySet from './utils/_hydrateSEG';\n\nconst Component = React.lazy(() => {\n  return import(\n    /* webpackPrefetch: true */ './viewports/OHIFCornerstoneSEGViewport'\n  );\n});\n\nconst OHIFCornerstoneSEGViewport = props => {\n  return (\n    <React.Suspense fallback={<div>Loading...</div>}>\n      <Component {...props} />\n    </React.Suspense>\n  );\n};\n\n/**\n * You can remove any of the following modules if you don't need them.\n */\nconst extension = {\n  /**\n   * Only required property. Should be a unique value across all extensions.\n   * You ID can be anything you want, but it should be unique.\n   */\n  id,\n\n  /**\n   * PanelModule should provide a list of panels that will be available in OHIF\n   * for Modes to consume and render. Each panel is defined by a {name,\n   * iconName, iconLabel, label, component} object. Example of a panel module\n   * is the StudyBrowserPanel that is provided by the default extension in OHIF.\n   */\n  getPanelModule: ({\n    servicesManager,\n    commandsManager,\n    extensionManager,\n  }): Types.Panel[] => {\n    const wrappedPanelSegmentation = () => {\n      return (\n        <PanelSegmentation\n          commandsManager={commandsManager}\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n        />\n      );\n    };\n\n    return [\n      {\n        name: 'panelSegmentation',\n        iconName: 'tab-segmentation',\n        iconLabel: 'Segmentation',\n        label: 'Segmentation',\n        component: wrappedPanelSegmentation,\n      },\n    ];\n  },\n\n  getViewportModule({ servicesManager, extensionManager }) {\n    const ExtendedOHIFCornerstoneSEGViewport = props => {\n      return (\n        <OHIFCornerstoneSEGViewport\n          servicesManager={servicesManager}\n          extensionManager={extensionManager}\n          commandsManager={commandsManager}\n          {...props}\n        />\n      );\n    };\n\n    return [\n      { name: 'dicom-seg', component: ExtendedOHIFCornerstoneSEGViewport },\n    ];\n  },\n  /**\n   * SopClassHandlerModule should provide a list of sop class handlers that will be\n   * available in OHIF for Modes to consume and use to create displaySets from Series.\n   * Each sop class handler is defined by a { name, sopClassUids, getDisplaySetsFromSeries}.\n   * Examples include the default sop class handler provided by the default extension\n   */\n  getSopClassHandlerModule,\n  getHangingProtocolModule,\n};\n\nexport default extension;\nexport { hydrateSEGDisplaySet };\n","async function _hydrateSEGDisplaySet({\n  segDisplaySet,\n  viewportIndex,\n  servicesManager,\n}) {\n  const {\n    segmentationService,\n    hangingProtocolService,\n    viewportGridService,\n  } = servicesManager.services;\n\n  const displaySetInstanceUID = segDisplaySet.referencedDisplaySetInstanceUID;\n\n  let segmentationId = null;\n\n  // We need the hydration to notify panels about the new segmentation added\n  const suppressEvents = false;\n\n  segmentationId = await segmentationService.createSegmentationForSEGDisplaySet(\n    segDisplaySet,\n    segmentationId,\n    suppressEvents\n  );\n\n  segmentationService.hydrateSegmentation(segDisplaySet.displaySetInstanceUID);\n\n  const { viewports } = viewportGridService.getState();\n\n  const updatedViewports = hangingProtocolService.getViewportsRequireUpdate(\n    viewportIndex,\n    displaySetInstanceUID\n  );\n\n  // Todo: fix this after we have a better way for stack viewport segmentations\n\n  // check every viewport in the viewports to see if the displaySetInstanceUID\n  // is being displayed, if so we need to update the viewport to use volume viewport\n  // (if already is not using it) since Cornerstone3D currently only supports\n  // volume viewport for segmentation\n  viewports.forEach((viewport, index) => {\n    if (index === viewportIndex) {\n      return;\n    }\n\n    const shouldDisplaySeg = segmentationService.shouldRenderSegmentation(\n      viewport.displaySetInstanceUIDs,\n      segDisplaySet.displaySetInstanceUID\n    );\n\n    if (shouldDisplaySeg) {\n      updatedViewports.push({\n        viewportIndex: index,\n        displaySetInstanceUIDs: viewport.displaySetInstanceUIDs,\n        viewportOptions: {\n          initialImageOptions: {\n            preset: 'middle',\n          },\n        },\n      });\n    }\n  });\n\n  // Do the entire update at once\n  viewportGridService.setDisplaySetsForViewports(updatedViewports);\n\n  return true;\n}\n\nexport default _hydrateSEGDisplaySet;\n"],"names":["id","packageJson","SOPClassHandlerId","sopClassUids","loadPromises","_getDisplaySetsFromSeries","instances","servicesManager","extensionManager","instance","StudyInstanceUID","SeriesInstanceUID","SOPInstanceUID","SeriesDescription","SeriesNumber","SeriesDate","SOPClassUID","wadoRoot","wadoUri","wadoUriRoot","displaySet","Modality","loading","isReconstructable","displaySetInstanceUID","utils","guid","referencedImages","referencedSeriesInstanceUID","referencedDisplaySetInstanceUID","isDerivedDisplaySet","isLoaded","isHydrated","segments","isOverlayDisplaySet","referencedSeriesSequence","ReferencedSeriesSequence","Error","referencedSeries","ReferencedInstanceSequence","getReferenceDisplaySet","displaySetService","services","referencedDisplaySets","getDisplaySetsForSeries","length","referencedDisplaySet","referencedVolumeURI","referencedVolumeId","load","async","headers","_ref","segDisplaySet","segmentationService","getSegmentation","_segmentationExists","Promise","resolve","reject","Object","keys","_ref2","utilityModule","getModuleEntry","dicomLoaderService","exports","arrayBuffer","findDicomDataPromise","cachedReferencedVolume","cache","getVolume","imageIds","tolerance","skipOverlapping","eventTarget","addEventListener","Enums","Events","SEGMENTATION_LOAD_PROGRESS","evt","percentComplete","detail","_broadcastEvent","EVENTS","SEGMENT_LOADING_COMPLETE","results","adaptersSEG","Cornerstone3D","Segmentation","generateToolState","metaData","triggerEvent","segMetadata","data","forEach","i","cielab","rgba","RecommendedDisplayCIELabValue","dcmjs","Colors","dicomlab2RGB","map","x","Math","round","assign","_loadSegments","suppressEvents","createSegmentationForSEGDisplaySet","then","catch","error","_load","_ref3","name","getDisplaySetsFromSeries","uiDialogService","label","callback","dialogId","onSubmitHandler","action","value","dismiss","create","centralize","isDraggable","showOverlay","content","Dialog","contentProps","title","noCloseButton","onClose","actions","text","type","ButtonEnums","secondary","primary","onSubmit","body","setValue","React","Input","labelClassName","autoFocus","className","onChange","event","persist","target","onKeyPress","key","PanelSegmentation","commandsManager","appConfig","useAppConfig","disableEditing","t","useTranslation","selectedSegmentationId","setSelectedSegmentationId","useState","segmentationConfiguration","setSegmentationConfiguration","getConfiguration","segmentations","setSegmentations","getSegmentations","isMinimized","setIsMinimized","onToggleMinimizeSegmentation","useCallback","prevState","useEffect","lastSegmentationId","added","SEGMENTATION_ADDED","updated","SEGMENTATION_UPDATED","removed","SEGMENTATION_REMOVED","subscriptions","unsubscribe","subscribe","push","unsub","getToolGroupIds","segmentationId","getToolGroupIdsWithSegmentation","_setSegmentationConfiguration","setConfiguration","SegmentationGroupTable","showAddSegmentation","activeSegmentationId","onSegmentationClick","setActiveSegmentationForToolGroup","onSegmentationDelete","remove","onSegmentationEdit","segmentation","callInputDialog","actionId","addOrUpdateSegmentation","onSegmentClick","segmentIndex","setActiveSegmentForSegmentation","toolGroupId","jumpToSegmentCenter","onSegmentEdit","segment","setSegmentLabelForSegmentation","onSegmentColorClick","onSegmentDelete","console","warn","onToggleSegmentVisibility","isVisible","setSegmentVisibility","onToggleSegmentationVisibility","toggleSegmentationVisibility","segmentationConfig","initialConfig","setRenderOutline","setOutlineOpacityActive","setRenderFill","setRenderInactiveSegmentations","setOutlineWidthActive","setFillAlpha","setFillAlphaInactive","propTypes","PropTypes","runCommand","isRequired","segProtocol","protocolMatchingRules","toolGroupIds","numberOfPriorsReferenced","defaultViewport","viewportOptions","viewportType","allowUnmatchedView","displaySets","matchedDisplaySetsIndex","displaySetSelectors","segDisplaySetId","seriesMatchingRules","attribute","constraint","equals","stages","viewportStructure","layoutType","properties","rows","columns","viewports","protocol","Component","OHIFCornerstoneSEGViewport","props","fallback","getPanelModule","iconName","iconLabel","component","wrappedPanelSegmentation","getViewportModule","_extends","getSopClassHandlerModule","getHangingProtocolModule","viewportIndex","hangingProtocolService","viewportGridService","hydrateSegmentation","getState","updatedViewports","getViewportsRequireUpdate","viewport","index","shouldRenderSegmentation","displaySetInstanceUIDs","initialImageOptions","preset","setDisplaySetsForViewports"],"sourceRoot":""}